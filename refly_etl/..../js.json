[{"name": "JavaScript reference", "parent": null, "url": "/en-US/docs/Web/JavaScript/Reference", "parsed_url": "/javascript/javascript reference", "content": "This part of the JavaScript section on MDN serves as a repository of facts\nabout the JavaScript language. Read more [about this reference][1].\n\n## Global Objects\n\nThis chapter documents all the [JavaScript standard built-in objects][2],\nalong with their methods and properties.\n\n### Value properties\n\nGlobal properties returning a simple value.\n\n  * [`Infinity`][3]\n  * [`NaN`][4]\n  * [`undefined`][5]\n  * [`null`][6] literal\n\n### Function properties\n\nGlobal functions returning the result of a specific routine.\n\n  * [`eval()`][7]\n  * [`uneval()`][8] _ _\n  * [`isFinite()`][9]\n  * [`isNaN()`][10]\n  * [`parseFloat()`][11]\n  * [`parseInt()`][12]\n  * [`decodeURI()`][13]\n  * [`decodeURIComponent()`][14]\n  * [`encodeURI()`][15]\n  * [`encodeURIComponent()`][16]\n  * [`escape()`][17] _ _\n  * [`unescape()`][18] _ _\n\n### Fundamental objects\n\nGeneral language objects, functions and errors.\n\n  * [`Object`][19]\n  * [`Function`][20]\n  * [`Boolean`][21]\n  * [`Symbol`][22] _ _\n  * [`Error`][23]\n  * [`EvalError`][24]\n  * [`InternalError`][25]\n  * [`RangeError`][26]\n  * [`ReferenceError`][27]\n  * [`SyntaxError`][28]\n  * [`TypeError`][29]\n  * [`URIError`][30]\n\n### Numbers and dates\n\nObjects dealing with numbers, dates and mathematical calculations.\n\n  * [`Number`][31]\n  * [`Math`][32]\n  * [`Date`][33]\n\n### Text processing\n\nObjects for manipulating texts.\n\n  * [`String`][34]\n  * [`RegExp`][35]\n\n### Indexed collections\n\nCollections ordered by an index. Array-type objects.\n\n  * [`Array`][36]\n  * [`Int8Array`][37]\n  * [`Uint8Array`][38]\n  * [`Uint8ClampedArray`][39]\n  * [`Int16Array`][40]\n  * [`Uint16Array`][41]\n  * [`Int32Array`][42]\n  * [`Uint32Array`][43]\n  * [`Float32Array`][44]\n  * [`Float64Array`][45]\n\n### Keyed collections\n\nCollections of objects as keys. Elements iterable in insertion order.\n\n  * [`Map`][46] _ _\n  * [`Set`][47] _ _\n  * [`WeakMap`][48] _ _\n  * [`WeakSet`][49] _ _\n\n### Structured data\n\nData buffers and **J**ava**S**cript **O**bject **N**otation.\n\n  * [`ArrayBuffer`][50]\n  * [`DataView`][51]\n  * [`JSON`][52]\n\n### Control abstraction objects\n\n  * [`Promise`][53] _ _\n\n### Reflection\n\n  * [`Reflect`][54] _ _\n  * [`Proxy`][55] _ _\n\n### Internationalization\n\nAdditions to the ECMAScript core for language-sensitive functionalities.\n\n  * [`Intl`][56]\n  * [`Intl.Collator`][57]\n  * [`Intl.DateTimeFormat`][58]\n  * [`Intl.NumberFormat`][59]\n\n### Non-standard objects\n\n  * [`Generator`][60] _ _\n  * [`Iterator`][61] _ _\n  * [`ParallelArray`][62] _ _\n  * [`StopIteration`][63] _ _\n\n### Other\n\n  * [`arguments][64]`\n\n## Statements\n\nThis chapter documents all the [JavaScript statements and declarations][65].\n\nFor an alphabetical listing see the sidebar on the left.\n\n### Control flow\n\n[`Block`][66]\n\n     A block statement is used to group zero or more statements. The block is delimited by a pair of curly brackets.\n[`break`][67]\n\n     Terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.\n[`continue`][68]\n\n     Terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.\n[`Empty`][69]\n\n     An empty statement is used to provide no statement, although the JavaScript syntax would expect one.\n[`if...else`][70]\n\n     Executes a statement if a specified condition is true. If the condition is false, another statement can be executed.\n[`switch`][71]\n\n     Evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.\n[`throw`][72]\n\n     Throws a user-defined exception.\n[`try...catch`][73]\n\n     Marks a block of statements to try, and specifies a response, should an exception be thrown.\n\n### Declarations\n\n[`var`][74]\n\n     Declares a variable, optionally initializing it to a value.\n_ _ [`let`][75]\n\n     Declares a block scope local variable, optionally initializing it to a value.\n_ _ [`const`][76]\n\n     Declares a read-only named constant.\n\n### Functions\n\n[`function`][77]\n\n     Declares a function with the specified parameters.\n_ _ [`function*`][78]\n\n     Generators functions enable writing [iterators][79] more easily.\n[`return`][80]\n\n     Specifies the value to be returned by a function.\n\n### Iterations\n\n[`do...while][81]`\n\n     Creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.\n[`for`][82]\n\n     Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.\n_ _ _ _ [`for each...in`][83]\n\n     Iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed.\n[`for...in`][84]\n\n     Iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.\n_ _ [`for...of`][85]\n\n     Iterates over iterable objects (including [arrays][86], array-like objects, [iterators and generators][87]), invoking a custom iteration hook with statements to be executed for the value of each distinct property.\n[`while`][88]\n\n     Creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.\n\n### Others\n\n[`debugger`][89]\n\n     Invokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.\n_ _ [`export`][90]\n\n     Used to export functions to make them available for imports in external modules, another scripts.\n_ _ [`import`][91]\n\n     Used to import functions exported from an external module, another script.\n[`label`][92]\n\n     Provides a statement with an identifier that you can refer to using a `break` or `continue` statement.\n\n_ _ [`with`][93]\n\n     Extends the scope chain for a statement.\n\n## Expressions and operators\n\nThis chapter documents all the [JavaScript expressions and operators][94].\n\nFor an alphabetical listing see the sidebar on the left.\n\n### Primary expressions\n\nBasic keywords and general expressions in JavaScript.\n\n[`this`][95]\n\n     The `this` keyword refers to the function's execution context.\n[`function`][96]\n\n     The `function` keyword defines a function expression.\n_ _ [`function*`][97]\n\n     The `function*` keyword defines a generator function expression.\n_ _ [`yield`][98]\n\n     Pause and resume a generator function\n_ _ [`yield*`][99]\n\n     Delegate to another generator function or iterable object.\n[`[]`][36]\n\n     Array initializer/literal syntax.\n[`{}`][100]\n\n     Object initializer/literal syntax.\n[`/ab+c/i`][35]\n\n     Regular expression literal syntax.\n_ _ [`[for (x of y) x]`][101]\n\n     Array comprehensions.\n_ _ [`(for (x of y) y)`][102]\n\n     Generator comprehensions.\n[`( )`][103]\n\n     Grouping operator.\n\n### Left-hand-side expressions\n\nLeft values are the destination of an assignment.\n\n[Property accessors][104]\n\n     Member operators provide access to a property or method of an object  \n(`object.property` and `object[\"property\"]`).\n\n[`new`][105]\n\n     The `new` operator creates an instance of a constructor.\n_ _ [`super`][106]\n\n     The `super` keyword calls the parent constructor.\n_ _ [`...obj`][107]\n\n     The spread operator allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) are expected.\n\n### Increment and decrement\n\nPostfix/prefix increment and postfix/prefix decrement operators.\n\n[`A++`][108]\n\n     Postfix increment operator.\n[`A--`][109]\n\n     Postfix decrement operator.\n[`++A`][108]\n\n     Prefix increment operator.\n[`\\--A`][109]\n\n     Prefix decrement operator.\n\n### Unary operators\n\nA unary operation is operation with only one operand.\n\n[`delete`][110]\n\n     The `delete` operator deletes a property from an object.\n[`void`][111]\n\n     The `void` operator discards an expression's return value.\n[`typeof`][112]\n\n     The `typeof` operator determines the type of a given object.\n[`+`][113]\n\n     The unary plus operator converts its operand to Number type.\n[`-`][114]\n\n     The unary negation operator converts its operand to Number type and then negates it.\n[`~`][115]\n\n     Bitwise NOT operator.\n[`!`][116]\n\n     Logical NOT operator.\n\n### Arithmetic operators\n\nArithmetic operators take numerical values (either literals or variables) as\ntheir operands and return a single numerical value.\n\n[`+`][117]\n\n     Addition operator.\n[`-`][118]\n\n     Subtraction operator.\n[`/`][119]\n\n     Division operator.\n[`*`][120]\n\n     Multiplication operator.\n[`%`][121]\n\n     Remainder operator.\n\n### Relational operators\n\nA comparison operator compares its operands and returns a `Boolean` value\nbased on whether the comparison is true.\n\n[`in`][122]\n\n     The `in` operator determines whether an object has a given property.\n[`instanceof`][123]\n\n     The `instanceof` operator determines whether an object is an instance of another object.\n`<`\n\n     Less than operator.\n`>`\n\n     Greater than operator.\n`<[=`][124]\n\n     Less than or equal operator.\n`>[=`][125]\n\n     Greater than or equal operator.\n\n### Equality operators\n\nThe result of evaluating an equality operator is always of type `Boolean`\nbased on whether the comparison is true.\n\n[`==`][126]\n\n     Equality operator.\n[`!=`][127]\n\n     Inequality operator.\n[`===`][128]\n\n     Identity operator.\n[`!==`][129]\n\n     Nonidentity operator.\n\n### Bitwise shift operators\n\nOperations to shift all bits of the operand.\n\n`<<`\n\n     Bitwise left shift operator.\n`>>`\n\n     Bitwise right shift operator.\n`>>>`\n\n     Bitwise unsigned right shift operator.\n\n### Binary bitwise operators\n\nBitwise operators treat their operands as a set of 32 bits (zeros and ones)\nand return standard JavaScript numerical values.\n\n`&`\n\n     Bitwise AND.\n[`|`][130]\n\n     Bitwise OR.\n[`^`][131]\n\n     Bitwise XOR.\n\n### Binary logical operators\n\nLogical operators are typically used with boolean (logical) values, and when\nthey are, they return a boolean value.\n\n`&&`\n\n     Logical AND.\n[`||`][132]\n\n     Logical OR.\n\n### Conditional (ternary) operator\n\n[`(condition ? ifTrue : ifFalse)`][133]\n\n    \n\nThe conditional operator returns one of two values based on the logical value\nof the condition.\n\n### Assignment operators\n\nAn assignment operator assigns a value to its left operand based on the value\nof its right operand.\n\n[`=`][134]\n\n     Assignment operator.\n[`*=`][135]\n\n     Multiplication assignment.\n[`/=`][136]\n\n     Division assignment.\n[`%=`][137]\n\n     Remainder assignment.\n[`+=`][138]\n\n     Addition assignment.\n[`-=`][139]\n\n     Subtraction assignment\n`<<[=`][140]\n\n     Left shift assignment.\n`>>[=`][141]\n\n     Right shift assignment.\n`>>>[=`][142]\n\n     Unsigned right shift assignment.\n`&[=`][143]\n\n     Bitwise AND assignment.\n[`^=`][144]\n\n     Bitwise XOR assignment.\n[`|=`][145]\n\n     Bitwise OR assignment.\n_ _ [`[a, b] = [1, 2]`][146]  \n_ _ [`{a, b} = {a:1, b:2}`][146]\n\n    \n\nDestructuring assignment allows you to assign the properties of an array or\nobject to variables using syntax that looks similar to array or object\nliterals.\n\n### Comma operator\n\n[`,`][147]\n\n     The comma operator allows multiple expressions to be evaluated in a single statement and returns the result of the last expression.\n\n### Non-standard features\n\n_ _ [Legacy generator function][148]\n\n     The `function` keyword can be used to define a legacy generator function inside an expression. To make the function a legacy generator, the function body should contains at least one [`yield`][98] expression.\n_ _ [Expression closures][149]\n\n     The expression closure syntax is a shorthand for writing simple function.\n\n## Functions\n\nThis chapter documents how to work with [JavaScript functions][150] to develop\nyour applications.\n\n  * [`arguments`][64]\n  * [Arrow functions][151]\n  * [Default parameters][152]\n  * [Rest parameters][153]\n\n## Additional reference pages\n\n  * [Lexical grammar][154]\n  * [Data types and data structures][155]\n  * [Strict mode][156]\n  * [Deprecated features][157]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/About\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\n\n[31]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[32]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\n\n[46]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[47]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[48]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n[49]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\n\n[50]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[51]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[52]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\n\n[53]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n[54]: /en-US/docs/Web/JavaScript/Reference/Reflect\n\n[55]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n\n[56]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\n\n[57]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n\n[58]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[59]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n[60]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\n\n[61]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator\n\n[62]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ParallelArray\n\n[63]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/StopIteration\n\n[64]: /en-US/docs/Web/JavaScript/Reference/Functions/arguments\n\n[65]: /en-US/docs/Web/JavaScript/Reference/Statements\n\n[66]: /en-US/docs/Web/JavaScript/Reference/Statements/block\n\n[67]: /en-US/docs/Web/JavaScript/Reference/Statements/break\n\n[68]: /en-US/docs/Web/JavaScript/Reference/Statements/continue\n\n[69]: /en-US/docs/Web/JavaScript/Reference/Statements/Empty\n\n[70]: /en-US/docs/Web/JavaScript/Reference/Statements/if...else\n\n[71]: /en-US/docs/Web/JavaScript/Reference/Statements/switch\n\n[72]: /en-US/docs/Web/JavaScript/Reference/Statements/throw\n\n[73]: /en-US/docs/Web/JavaScript/Reference/Statements/try...catch\n\n[74]: /en-US/docs/Web/JavaScript/Reference/Statements/var\n\n[75]: /en-US/docs/Web/JavaScript/Reference/Statements/let\n\n[76]: /en-US/docs/Web/JavaScript/Reference/Statements/const\n\n[77]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n[78]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n*\n\n[79]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\n\n[80]: /en-US/docs/Web/JavaScript/Reference/Statements/return\n\n[81]: /en-US/docs/Web/JavaScript/Reference/Statements/do...while\n\n[82]: /en-US/docs/Web/JavaScript/Reference/Statements/for\n\n[83]: /en-US/docs/Web/JavaScript/Reference/Statements/for_each...in\n\n[84]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[85]: /en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n[86]: https://developer.mozilla.org/en-US/docs/Core_JavaScript_1.5_Reference/Global_Objects/Array\n\n[87]: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators\n\n[88]: /en-US/docs/Web/JavaScript/Reference/Statements/while\n\n[89]: /en-US/docs/Web/JavaScript/Reference/Statements/debugger\n\n[90]: /en-US/docs/Web/JavaScript/Reference/Statements/export\n\n[91]: /en-US/docs/Web/JavaScript/Reference/Statements/import\n\n[92]: /en-US/docs/Web/JavaScript/Reference/Statements/label\n\n[93]: /en-US/docs/Web/JavaScript/Reference/Statements/with\n\n[94]: /en-US/docs/Web/JavaScript/Reference/Operators\n\n[95]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[96]: /en-US/docs/Web/JavaScript/Reference/Operators/function\n\n[97]: /en-US/docs/Web/JavaScript/Reference/Operators/function\n\n*\n\n[98]: /en-US/docs/Web/JavaScript/Reference/Operators/yield\n\n[99]: /en-US/docs/Web/JavaScript/Reference/Operators/yield\n\n*\n\n[100]: /en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\n\n[101]: /en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions\n\n[102]: /en-US/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions\n\n[103]: /en-US/docs/Web/JavaScript/Reference/Operators/Grouping\n\n[104]: /en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors\n\n[105]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[106]: /en-US/docs/Web/JavaScript/Reference/Operators/super\n\n[107]: /en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\n\n[108]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment\n\n[109]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Decrement\n\n[110]: /en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[111]: /en-US/docs/Web/JavaScript/Reference/Operators/void\n\n[112]: /en-US/docs/Web/JavaScript/Reference/Operators/typeof\n\n[113]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_plus\n\n[114]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_negation\n\n[115]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_NOT\n\n[116]: /en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_NOT\n\n[117]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Addition\n\n[118]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Subtraction\n\n[119]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Division\n\n[120]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Multiplication\n\n[121]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder\n\n[122]: /en-US/docs/Web/JavaScript/Reference/Operators/in\n\n[123]: /en-US/docs/Web/JavaScript/Reference/Operators/instanceof\n\n[124]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Less_than_or_equal_operator\n\n[125]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Greater_than_or_equal_operator\n\n[126]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality\n\n[127]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Inequality\n\n[128]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity\n\n[129]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Nonidentity\n\n[130]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR\n\n[131]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR\n\n[132]: /en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_OR\n\n[133]: /en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\n\n[134]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Assignment\n\n[135]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Multiplication_assignment\n\n[136]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Division_assignment\n\n[137]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Remainder_assignment\n\n[138]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Addition_assignment\n\n[139]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Subtraction_assignment\n\n[140]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Left_shift_assignment\n\n[141]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Right_shift_assignment\n\n[142]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Unsigned_right_shift_assignment\n\n[143]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_AND_assignment\n\n[144]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_XOR_assignment\n\n[145]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_OR_assignment\n\n[146]: /en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\n\n[147]: /en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator\n\n[148]: /en-US/docs/Web/JavaScript/Reference/Operators/Legacy_generator_function\n\n[149]: /en-US/docs/Web/JavaScript/Reference/Operators/Expression_closures\n\n[150]: /en-US/docs/Web/JavaScript/Reference/Functions\n\n[151]: /en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n\n[152]: /en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\n\n[153]: /en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\n\n[154]: /en-US/docs/Web/JavaScript/Reference/Lexical_grammar\n\n[155]: /en-US/docs/Web/JavaScript/Data_structures\n\n   [156]: /en-US/docs/Web/JavaScript/Reference/Strict_mode\n\n[157]: /en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\n\n", "alias": "JavaScript reference", "docset": "JavaScript", "path": ["JavaScript"], "type": "others"}]